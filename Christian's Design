import tkinter as tk
from sqlalchemy import create_engine, inspect
from tkinter import simpledialog, messagebox
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib import style
import pandas as pd
import os
from datetime import datetime, timedelta
from tzlocal import get_localzone

style.use("dark_background")

driver = "{ODBC Driver 18 for SQL Server}"
server_name = "cse535"
database_name = "ProjectDB"
username = "user"
password = "Password1"

connection_string = "mssql+pyodbc://<username>:<password>@<server_name>.database.windows.net/<database_name>?driver=ODBC+Driver+18+for+SQL+Server"

# Construct the connection string
connection_string = connection_string.replace("<username>", username)
connection_string = connection_string.replace("<password>", password)
connection_string = connection_string.replace("<server_name>", server_name)
connection_string = connection_string.replace("<database_name>", database_name)

# Create the SQLAlchemy engine
engine = create_engine(connection_string)

# Test the connection
try:
    engine.connect()
    print("Connection established successfully!")
except Exception as e:
    print("Error connecting to the database:", e)


class DataVisualizer:

    def __init__(self, window):
        print("Initializing DataVisualizer...")
        self.df = pd.DataFrame()
        self.timeRange = None
        self.filename = None

        # Creating an inspector to gather table names
        inspector = inspect(engine)
        table_names = inspector.get_table_names()

        # Client Names (Table Names)
        self.clientNames = table_names

        # Create window
        self.window = window
        self.window.title("RogerWare Prototype")

        # Edit canvas
        self.fig = Figure(figsize=(10, 5), dpi=100)
        self.ax = self.fig.add_subplot(111)
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.window)
        self.canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=True)

        """Buttons and Dropdown menus"""
        print("Creating buttons and dropdown menus...")
        btnFrame = tk.Frame(master=window)
        btnFrame.pack(side=tk.BOTTOM)

        # Change between utc and local time button
        utcFrame = tk.Frame(master=window)
        utcFrame.pack(side=tk.BOTTOM)

        # Clear button
        clearBtn = tk.Button(master=btnFrame, text="Clear Data", command=self.clearData)
        clearBtn.pack(side=tk.LEFT)

        # Time range button
        timeRangeBtn = tk.Button(master=btnFrame, text="Enter Time Range", command=self.setTimeRange)
        timeRangeBtn.pack(side=tk.LEFT)

        # Statistical Analysis Button
        statsBtn = tk.Button(master=btnFrame, text="Statistical Analysis", command=self.statsAnalysis)
        statsBtn.pack(side=tk.LEFT)

        # Query button
        queryDbBtn = tk.Button(master=btnFrame, text="Query", command=self.onQuerySelect)
        queryDbBtn.pack(side=tk.RIGHT)

        # Connect Database button
        uploadCSVBtn = tk.Button(master=btnFrame, text="Upload CSV", command=self.onUploadCSVSelect)
        uploadCSVBtn.pack(side=tk.RIGHT)

        selectedClientVar = tk.StringVar(self.window)
        selectedClientVar.set("Select a Table")

        # Dropdown for graph type selection
        self.graphTypes = ['Line', 'Bar', 'Scatter plot']
        selectedGraphTypeVar = tk.StringVar(self.window)
        selectedGraphTypeVar.set("Select a Graph Type")
        self.selectedGraphType = "Select a Graph Type" 

        graphTypeDropdown = tk.OptionMenu(self.window, selectedGraphTypeVar, *self.graphTypes,
                                          command=self.onGraphTypeSelected)
        graphTypeDropdown.pack()

        # Dropdown for data stream selection
        self.dataStreamNames = ['Eda avg', 'Acc magnitude avg', 'Temp avg', 'Movement intensity', 'Steps count',
                                'Rest', 'On Wrist']
        selectedDataStreamVar = tk.StringVar(self.window)
        selectedDataStreamVar.set(self.dataStreamNames[0])  # Set the default selected data stream
        self.selectedDataStream = self.dataStreamNames[0]  # Initialize self.selectedDataStream

        # Boolean for UTC checkbox
        self.utcVar = tk.BooleanVar()
        self.utcCheckbox = tk.Checkbutton(self.window, text="Convert to UTC", variable=self.utcVar)
        self.utcCheckbox.pack()
        self.utcVar.trace('w', self.onUtcChanged)

        """Buttons and Dropdown menus end here"""

        """ Function definitions """

        def onDataStreamSelected(*args):
            self.selectedDataStream = selectedDataStreamVar.get()  # Get the selected data stream
            self.plotData()

        selectedDataStreamVar.trace('w', onDataStreamSelected)

        self.dataStreamDropdown = tk.OptionMenu(self.window, selectedDataStreamVar, *self.dataStreamNames)
        self.dataStreamDropdown.pack()

        def onClientSelected(*args):
            selectedClient = selectedClientVar.get()  # Get the selected client
            tableDataQuery = f"SELECT CAST([Datetime_UTC] AS datetime)\
                            ,[Unix_Timestamp_UTC]\
                            ,[Timezone_minutes]\
                            ,[Acc_magnitude_avg]\
                            ,[Eda_avg]\
                            ,[Temp_avg]\
                            ,[Movement_intensity]\
                            ,[Steps_count]\
                            ,[Rest]\
                            ,[On_Wrist] FROM [dbo].[{selectedClient}];"
            print("Query:", tableDataQuery)
            self.filename = tableDataQuery

        selectedClientVar.trace('w', onClientSelected)

        self.clientDropdown = tk.OptionMenu(self.window, selectedClientVar, *self.clientNames)
        self.clientDropdown.pack()
        print("DataVisualizer initialized.")

    def onUtcChanged(self, *args):
        print("Executing onUtcChanged...")
        self.plotData()
        print("Finished executing onUtcChanged.")

    def formatTime(self, x, *args):
        h = int(x)
        m = int((x * 60) % 60)
        s = int((x * 3600) % 60)
        return f"{h:02d}:{m:02d}:{s:02d}"

    def onGraphTypeSelected(self, selectedGraphType):
        print("Executing onGraphTypeSelected...")
        self.selectedGraphType = selectedGraphType
        self.plotData()
        print("Finished executing onGraphTypeSelected.")

    def clearData(self):
        print("Executing clearData...")
        self.ax.clear()
        self.canvas.draw()
        self.df = pd.DataFrame()
        self.timeRange = None
        print("Finished executing clearData.")

    @staticmethod
    def connectDb():
        print("Executing connectDb...")
        return
        print("Finished executing connectDb.")

    def onQuerySelect(self):
        # Get the query from the user using a popup dialog
        query = tk.simpledialog.askstring("Query", "Enter your SQL query:")

        # If the user provided a query, execute it
        if query is not None and query.strip():
            try:
                self.filename = query
                self.plotData()
            except Exception as e:
                messagebox.showerror("Error", f"Error executing query: {e}")
        else:
            messagebox.showinfo("Query", "Please enter a valid SQL query.")
        return
        print("Finished executing onQuerySelect.")

    def onUploadCSVSelect(self):
        print("Executing onUploadCSVSelect...")
        return
        print("Finished executing onUploadCSVSelect.")

    def setTimeRange(self):
        print("Executing setTimeRange...")
        try:
            startStr = simpledialog.askstring("Time Range", "Enter start time (HH:MM:SS):")
            endStr = simpledialog.askstring("Time Range", "Enter end time (HH:MM:SS):")
            # For whatever reason, time was being read backward, so adjustment was made for user's convenience
            start = datetime.strptime(startStr, "%H:%M:%S").time()
            end = datetime.strptime(endStr, "%H:%M:%S").time()

            start = timedelta(hours=start.hour, minutes=start.minute, seconds=start.second)
            end = timedelta(hours=end.hour, minutes=end.minute, seconds=end.second)

            # Plot data with the new time range
            if start is not None and end is not None and start < end:
                self.timeRange = (start, end)
                self.plotData()
            else:
                messagebox.showerror("Invalid Time Range", "Start time must be less than end time.")
        except ValueError:
            messagebox.showerror("Invalid Input", "Time inputs must be in HH:MM:SS format.")
        print("Finished executing setTimeRange.")

    def statsAnalysis(self):
        print("Executing statsAnalysis...")
        if self.df.empty:
            messagebox.showerror("No Data", "Please load data first.")
            return

        # Create a new window
        statsWindow = tk.Toplevel(self.window)
        statsWindow.title("Statistical Analysis")

        # Compute and display the basic statistics for the columns
        # Compute and display the basic statistics for the columns
        for column in [self.selectedDataStream]:
            mean_val = self.df[column.replace(' ', '_')].mean()
            median_val = self.df[column.replace(' ', '_')].median()

            statsStr = f"{column}:" \
                       f"\nMean: {mean_val}" \
                       f"\nMedian: {median_val}"\
                       f"\nStd. dev: {self.df[column.replace(' ', '_')].std()}" \
                       f"\nMin: {self.df[column.replace(' ', '_')].min()}" \
                       f"\nMax: {self.df[column.replace(' ', '_')].max()}"

            label = tk.Label(master=statsWindow, text=statsStr, justify=tk.LEFT)
            label.pack()
        print("Finished executing statsAnalysis.")

    def plotData(self):
        print("Executing plotData...")
        if self.filename is None:
            messagebox.showerror("No File Selected", "Please select a table.")
            return

        try:
            self.df = pd.read_sql(self.filename, engine)
            self.df['Datetime'] = pd.to_datetime(self.df['Unix_Timestamp_UTC'], unit='ms')

            if self.utcVar.get():
                # Convert to UTC if necessary
                self.df['Datetime'] = self.df['Datetime'].dt.tz_localize('UTC')
            else:
                # Convert to local time if necessary
                localTz = get_localzone()
                self.df['Datetime'] = self.df['Datetime'].dt.tz_localize('UTC').dt.tz_convert(localTz)

            self.df['Minute'] = self.df['Datetime'].dt.minute + self.df['Datetime'].dt.hour * 60 + self.df[
                'Datetime'].dt.second / 60

            # Convert 'Minute' column to hours:minutes:seconds format
            self.df['Minute'] = pd.to_timedelta(self.df['Minute'], unit='m')

            # Drop rows with missing data
            self.df.dropna(inplace=True)

            # Sort data by 'Minute' column
            self.df.sort_values('Minute', inplace=True)

            self.ax.clear()

            if self.timeRange:
                start, end = self.timeRange
                dfRange = self.df[(self.df['Minute'] >= start) & (self.df['Minute'] <= end)]
            else:
                dfRange = self.df

            xValues = dfRange['Minute'].dt.total_seconds() / 3600
            yValues = dfRange[self.selectedDataStream.replace(' ', '_')]

            if self.selectedGraphType == 'Line':
                self.ax.plot(xValues, yValues, label=self.selectedDataStream, color='plum')
            elif self.selectedGraphType == 'Bar':
                self.ax.bar(xValues, yValues, label=self.selectedDataStream, color='plum')
            elif self.selectedGraphType == 'Scatter plot':
                self.ax.scatter(xValues, yValues, label=self.selectedDataStream, color='plum')

            self.ax.set_title(f'{self.selectedDataStream} Over Time', fontweight='bold', color='cornflowerblue')
            self.ax.set_xlabel('Time', fontweight='bold', color='cornflowerblue')
            self.ax.set_ylabel(self.selectedDataStream, fontweight='bold', color='cornflowerblue')
            self.ax.xaxis.set_major_formatter(self.formatTime)

            self.ax.legend()
            self.canvas.draw()

        except pd.errors.EmptyDataError:
            messagebox.showerror("Empty File", "File is empty.")
        except pd.errors.ParserError:
            messagebox.showerror("Invalid File", "File is not a valid CSV file.")
        print("Finished executing plotData.")


if __name__ == "__main__":
    print("Starting the application...")
    root = tk.Tk()
    dataVisualizer = DataVisualizer(root)
    root.mainloop()
    print("Application stopped.")

